---
import {getCollection} from 'astro:content';
import PageLayout from '../layouts/PageLayout.astro';
import PageMeta from '../components/PageMeta.astro';
import {SITE_TITLE} from '../config';
import bannerVid from '../videos/Sub50kBanner.mp4';
import '../components/home/style.css';
import ScrollingCards from '../components/home/scrollingCards.astro';

const allPosts = await getCollection('artist');

const sortedPosts = allPosts
	.sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf())
	.filter((post) => !post.data.draft);

function addDummyCards(
	columnPosts: {
		tags?: string[] | undefined;
		forFansOf?: string[] | undefined;
		image?: string | undefined;
		artistBandcampLink?: string | undefined;
		draft: boolean;
		name: string;
		description: string;
		publishDate: Date;
		monthlyListeners: number;
		banner: string;
		avatar: string;
		artistSpotifyLink: string;
	}[]
) {
	const dummyCard = {
		dummy: true,
		monthlyListeners: 50001,
		draft: true,
		name: '',
		description:
			'Playing stadiums across worldwide from a young age, this artist has been a household name for decades.',
		publishDate: new Date('2021-08-01T00:00:00.000Z'),
		banner: '',
		avatar: '',
		artistSpotifyLink: '',
	};

	for (let i = 0; i < 6; i++) {
		const randomIndex = Math.floor(Math.random() * columnPosts.length);
		const thisDummyCard = {
			...dummyCard,
			name: `Artist #${Math.floor(Math.random() * (52 - 15 + 1)) + 15}`,
		};
		columnPosts.splice(randomIndex, 0, thisDummyCard);
	}
	return columnPosts;
}

const randomisedPosts = allPosts.sort(() => Math.random() - 0.5);

let firstColumnPosts = randomisedPosts
	.slice(0, randomisedPosts.length / 4)
	.map((post) => post.data);
firstColumnPosts = addDummyCards(firstColumnPosts);

let secondColumnPosts = randomisedPosts
	.slice(randomisedPosts.length / 4, randomisedPosts.length / 2)
	.map((post) => post.data);
secondColumnPosts = addDummyCards(secondColumnPosts);

let thirdColumnPosts = randomisedPosts
	.slice(randomisedPosts.length / 2, (randomisedPosts.length / 4) * 3)
	.map((post) => post.data);
thirdColumnPosts = addDummyCards(thirdColumnPosts);

let fourthColumnPosts = randomisedPosts
	.slice((randomisedPosts.length / 4) * 3, randomisedPosts.length)
	.map((post) => post.data);
fourthColumnPosts = addDummyCards(fourthColumnPosts);
---

<PageLayout>
	<PageMeta title={SITE_TITLE} slot="meta" />
	<section slot="main">
		<div
			class="h-[80vh] max-w-6xl mx-auto w-full grid grid-cols-4 relative overflow-hidden"
		>
			<div
				class="absolute h-full w-full z-30 pointer-events-none"
				style="background: radial-gradient(71.89999999999999% 72.7% at 50% 19.7%,rgba(0,145,255,0) 0%, rgb(var(--color-bg-body)) 100%);"
			>
			</div>
			<ScrollingCards index={0} posts={firstColumnPosts} />
			<ScrollingCards index={1} posts={secondColumnPosts} />
			<ScrollingCards index={2} posts={thirdColumnPosts} />
			<ScrollingCards index={3} posts={fourthColumnPosts} />
		</div>
		<div class="max-w-3xl mx-auto px-6 sm:px-8">
			<video
				src={bannerVid}
				class="w-full rounded border border-white md:mb-16 lg:mb-24 mb-8"
				autoplay
				muted
				playsinline></video>

			<ul>
				{
					sortedPosts.map((post) => {
						const formattedDate = new Date(
							post.data.publishDate
						).toLocaleDateString('en-us', {
							year: 'numeric',
							month: 'short',
							day: 'numeric',
						});
						return (
							<li class="grid grid-cols-[1fr] md:grid-cols-[1fr_auto] mb-3 md:gap-2 items-start">
								<div class="flex items-center">
									<div
										class="h-6 w-6 border border-white/50 bg-cover bg-center rounded-full mr-2"
										style={{
											backgroundImage: `url(https://res.cloudinary.com/sub50k/image/upload/f_auto,q_auto:best/${post.data.avatar});`,
										}}
									/>
									<div class="title">
										<a
											href={`/artist/${post.slug}`}
											class="unset hover:text-text-link"
										>
											{post.data.name}
										</a>
									</div>
									<span class="ml-8 highlight">
										{post.data.monthlyListeners.toLocaleString('en-US')}
									</span>
								</div>
								<div class="text-text-muted text-sm italic">
									<time datetime={post.data.publishDate.toISOString()}>
										{formattedDate}
									</time>
								</div>
							</li>
						);
					})
				}
			</ul>
		</div>
	</section>
</PageLayout>
